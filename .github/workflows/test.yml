name: Test

on:
  push:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Get supported PHP versions
        run: |
          echo "supported_versions=$(curl -sSL "https://www.php.net/releases/index.php?json" | jq -c "[..| objects | .supported_versions? // empty] | flatten")" >> $GITHUB_OUTPUT
      - name: Get PHP tags
        id: php_tags
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/php/php-src/git/matching-refs/tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine versions
        run: |
          echo "${{ steps.php_tags.outputs.data }}" | jq -r '.[] | (.ref | sub("refs/tags/"; "")) + " " + .object.sha'

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get PHP tags
#         id: php_tags
#         uses: octokit/request-action@v2.x
#         with:
#           route: GET /repos/php/php-src/git/matching-refs/tags
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Determine
#         run: |
#           echo "${{ steps.php_tags.outputs.data }}"
  # first:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Generate matrix
  #       id: generate_matrix
  #       env:
  #         _gm_foo: '["bongo", "conga"]'
  #         _gm_bar: '["qongo", "dongo"]'
  #       run: |
  #         echo "values=$(printenv | grep '^_gm_' | sed 's/^_gm_//' | jq -R 'split("=") | {(.[0]): .[1]}' | jq -s -c 'add')" >> $GITHUB_OUTPUT
  #   outputs:
  #     values: ${{ steps.generate_matrix.outputs.values }}
  # second:
  #   needs: first
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Describe
  #       id: describe
  #       run: |
  #         echo "directories=$(ls -d variants/*/ | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  #   outputs:
  #     directories: ${{ steps.describe.outputs.directories }}
  # third:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       include:
  #         - foo: "1"
  #           bar: "1"
  #         - foo: "2"
  #           bar: "2"
  #   steps:
  #     - run: |
  #         echo "foo: ${{ matrix.foo }}, bar: ${{ matrix.bar }}"
  # end:
  #   needs: ["first", "second"]
  #   uses: ./.github/workflows/reuse.yml
  #   with:
  #     foo: ${{ fromJson(needs.first.outputs.values).foo }}
  #     bar: ${{ fromJson(needs.first.outputs.values).bar }}
  #     directories: ${{ needs.second.outputs.directories }}
