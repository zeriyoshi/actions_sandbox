name: Test

on:
  push:

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Get supported PHP versions
        id: supported_versions
        run: |
          curl -sSL "https://www.php.net/releases/index.php?json" | jq -c "[..| objects | .supported_versions? // empty] | flatten" > "versions.json"
      - name: Determine version and hash
        run: |
          curl -sSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/php/php-src/git/matching-refs/tags" > "tags.json"
          jq -r '.[]' "versions.json" | while read VERSION; do
            jq -r '.[] | (.ref | sub("refs/tags/php-"; "")) + " " + .object.sha' "tags.json" \
            | grep -E "^${VERSION}\.[0-9]+ " \
            | sort -V \
            | tail -n1 >> "versions.txt"
          done
          jq -R -s -c 'split("\n") | map(select(length > 0)) | map(split(" ")) | map({version: .[0], minor: (.[0] | split(".") | .[0:2] | join(".")), hash: .[1]})' "versions.txt" > "version_and_hash.json"
      - name: Generate matrix include
        id: matrix_include
        run: |
          yq -o=json << 'EOF' > "mixin.json"
            - variant: ""
              configure_append: ""
              optimize_options_c_cpp: "-O2"
              optimize_options_ld: "-O1"
            - variant: "-debug"
              configure_append: "--enable-debug"
              optimize_options_c_cpp: "-O0"
              optimize_options_ld: "-O0"
            - variant: "-opt"
              configure_append: ""
              optimize_options_c_cpp: "-O3"
              optimize_options_ld: "-O2"

          EOF
          echo values=$(jq --argjson mixin "$(cat "mixin.json")" '[.[] | $mixin[] as $y | . + $y]' "version_and_hash.json") >> $GITHUB_OUTPUT
    outputs:
      matrix_include: ${{ steps.matrix_include.outputs.values }}
  kick:
    needs: prepare
    uses: ./.github/workflows/reuse.yml
    with:
      matrix_include: ${{ needs.prepare.outputs.matrix_include }}
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get PHP tags
#         id: php_tags
#         uses: octokit/request-action@v2.x
#         with:
#           route: GET /repos/php/php-src/git/matching-refs/tags
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Determine
#         run: |
#           echo "${{ steps.php_tags.outputs.data }}"
  # first:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Generate matrix
  #       id: generate_matrix
  #       env:
  #         _gm_foo: '["bongo", "conga"]'
  #         _gm_bar: '["qongo", "dongo"]'
  #       run: |
  #         echo "values=$(printenv | grep '^_gm_' | sed 's/^_gm_//' | jq -R 'split("=") | {(.[0]): .[1]}' | jq -s -c 'add')" >> $GITHUB_OUTPUT
  #   outputs:
  #     values: ${{ steps.generate_matrix.outputs.values }}
  # second:
  #   needs: first
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Describe
  #       id: describe
  #       run: |
  #         echo "directories=$(ls -d variants/*/ | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  #   outputs:
  #     directories: ${{ steps.describe.outputs.directories }}
  # third:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       include:
  #         - foo: "1"
  #           bar: "1"
  #         - foo: "2"
  #           bar: "2"
  #   steps:
  #     - run: |
  #         echo "foo: ${{ matrix.foo }}, bar: ${{ matrix.bar }}"
  # end:
  #   needs: ["first", "second"]
  #   uses: ./.github/workflows/reuse.yml
  #   with:
  #     foo: ${{ fromJson(needs.first.outputs.values).foo }}
  #     bar: ${{ fromJson(needs.first.outputs.values).bar }}
  #     directories: ${{ needs.second.outputs.directories }}
